import cv2
import numpy as np
import math
from enum import Enum
from matplotlib import image as mpimage
from matplotlib import pyplot as plt
import glob
import csv

class OrangeHSVSeg:
    """
    An OpenCV pipeline generated by GRIP.
    """
    
    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__hsv_threshold_hue = [0, 30]
        self.__hsv_threshold_saturation = [102, 192]
        self.__hsv_threshold_value = [190, 255]

        self.hsv_threshold_output = None


    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step HSV_Threshold0:
        self.__hsv_threshold_input = source0
        (self.hsv_threshold_output) = self.__hsv_threshold(self.__hsv_threshold_input, self.__hsv_threshold_hue, self.__hsv_threshold_saturation, self.__hsv_threshold_value)


    @staticmethod
    def __hsv_threshold(input, hue, sat, val):
        """Segment an image based on hue, saturation, and value ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max value.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_RGB2HSV)
        return cv2.inRange(out, (hue[0], sat[0], val[0]),  (hue[1], sat[1], val[1]))


def ROC(lab, genLab, thresh):

    TPR = np.zeros(len(thresh))
    FPR = np.zeros(len(thresh))
    TNR = np.zeros(len(thresh))
    FNR = np.zeros(len(thresh))

    for i in range(len(thresh)):

        TPC = 0.0
        FPC = 0.0
        TNC = 0.0
        FNC = 0.0
 
        for f, val in genLab.items():

            if val[i] == True and lab[f] == True:
                TPC += 1
            elif val[i] == True and lab[f] == False:
                FNC += 1
            elif val[i] == False and lab[f] == False:
                TNC += 1
            elif val[i] == False and lab[f] == True:
                FPC += 1
            else:
                print('problem')
            # End if

        # End for
        # print(TPC, FNC, TNC, FPC)
        # calculate rates
        TPR[i] = TPC/(TPC + FNC)
        # FPR[i] = FPC/(FPC + TNC)
        # TNR[i] = TNC/(FPC + TNC)
        FNR[i] = FNC/(TPC + FNC)

    return TPR, FPR#, TNR, FNR

# End ROC

def isOrange(segIm, thresh):

    count = np.count_nonzero(segIm)

    if count >= thresh:
        return(True)
    else:
        return(False)
    # End if

# End isOrange


threshold = np.arange(0, 10001, 100)

# Read in the labels for images
reader = csv.reader(open('localData/labels.csv'))

labels = {}
genLabels = {}

for row in reader:

    key = row[0]

    if row[1] == 'people':
        labels[key] = True
    else:
        labels[key] = False
    # End if

# End for

# Create system pipeline.
segPipe = OrangeHSVSeg()

# Read images one at a time and put them through color segmentation.
for fName in glob.glob('localData/images/*.jpg'):

    key = fName.split('/')[2]

    print(key)
    
    genLabels[key] = []

    image = mpimage.imread(fName)

    # Segment image
    segPipe.process(image)
    segImage = segPipe.hsv_threshold_output
    
    # For each image, cycle through thresholds.
    for i in threshold:

        # Determine label based on threshold
        genLabels[key].append(isOrange(segImage, i))

    # End for

# End for

TPR, FPR = ROC(labels, genLabels, threshold)

print(TPR, FPR)#, TNR, FNR)

plt.plot(FPR, TPR)
plt.show()
